package com.moe.myapp;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMapOptions;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

import android.os.Bundle;
import android.os.Parcel;
import android.app.Activity;
import android.app.Dialog;
import android.content.Intent;
import android.content.IntentSender;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Menu;
import android.widget.Toast;

public class MainActivity extends FragmentActivity implements
GooglePlayServicesClient.ConnectionCallbacks,
GooglePlayServicesClient.OnConnectionFailedListener {

	private GoogleMap mMap;
	LocationClient mLocationClient;
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		mLocationClient= new LocationClient(this, this, this);
		
		GoogleMapOptions options = new GoogleMapOptions();
	    
		mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
		mMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
		mMap.setMyLocationEnabled(true);
		mMap.getMyLocation();
		mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(38.89,-77.03), 12));

		
	}
	@Override
    protected void onStart() {
        super.onStart();
        // Connect the client.
        mLocationClient.connect();
    }
	 @Override
	    protected void onStop() {
	        // Disconnecting the client invalidates it.
	        mLocationClient.disconnect();
	        super.onStop();
	    }

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}
	
	
	 private final static int
     CONNECTION_FAILURE_RESOLUTION_REQUEST = 9000;
// Define a DialogFragment that displays the error dialog
public static class ErrorDialogFragment extends DialogFragment {
 // Global field to contain the error dialog
 private Dialog mDialog;
 // Default constructor. Sets the dialog field to null
 public ErrorDialogFragment() {
     super();
     mDialog = null;
 }
 // Set the dialog to display
 public void setDialog(Dialog dialog) {
     mDialog = dialog;
 }
 // Return a Dialog to the DialogFragment.
 @Override
 public Dialog onCreateDialog(Bundle savedInstanceState) {
     return mDialog;
 }
}
/*
* Handle results returned to the FragmentActivity
* by Google Play services
*/
@Override
protected void onActivityResult(
     int requestCode, int resultCode, Intent data) {
 // Decide what to do based on the original request code
 switch (requestCode) {

     case CONNECTION_FAILURE_RESOLUTION_REQUEST :
     /*
      * If the result code is Activity.RESULT_OK, try
      * to connect again
      */
         switch (resultCode) {
             case Activity.RESULT_OK :
             /*
              * Try the request again
              */
             
             break;
         }
     
 }
}

private boolean servicesConnected() {
 // Check that Google Play services is available
 int resultCode =
         GooglePlayServicesUtil.
                 isGooglePlayServicesAvailable(this);
 // If Google Play services is available
 if (ConnectionResult.SUCCESS == resultCode) {
     // In debug mode, log the status
     Log.d("Location Updates",
             "Google Play services is available.");
     // Continue
     return true;
 // Google Play services was not available for some reason
 } else {
//     // Get the error code
//     int errorCode = connectionResult.getErrorCode();
//     // Get the error dialog from Google Play services
//     Dialog errorDialog = GooglePlayServicesUtil.getErrorDialog(
//             errorCode,
//             this,
//             CONNECTION_FAILURE_RESOLUTION_REQUEST);
//
//     // If Google Play services can provide an error dialog
//     if (errorDialog != null) {
//         // Create a new DialogFragment for the error dialog
//         ErrorDialogFragment errorFragment =
//                 new ErrorDialogFragment();
//         // Set the dialog in the DialogFragment
//         errorFragment.setDialog(errorDialog);
//         // Show the error dialog in the DialogFragment
//         errorFragment.show(getSupportFragmentManager(),
//                 "Location Updates");
//     }
 return false;}
}
	
@Override
public void onConnected(Bundle dataBundle) {
    // Display the connection status
    Toast.makeText(this, "Connected", Toast.LENGTH_SHORT).show();

}

/*
 * Called by Location Services if the connection to the
 * location client drops because of an error.
 */
@Override
public void onDisconnected() {
    // Display the connection status
    Toast.makeText(this, "Disconnected. Please re-connect.",
            Toast.LENGTH_SHORT).show();
}

/*
 * Called by Location Services if the attempt to
 * Location Services fails.
 */
@Override
public void onConnectionFailed(ConnectionResult connectionResult) {
    /*
     * Google Play services can resolve some errors it detects.
     * If the error has a resolution, try sending an Intent to
     * start a Google Play services activity that can resolve
     * error.
     */
    if (connectionResult.hasResolution()) {
        try {
            // Start an Activity that tries to resolve the error
            connectionResult.startResolutionForResult(
                    this,
                    CONNECTION_FAILURE_RESOLUTION_REQUEST);
            /*
             * Thrown if Google Play services canceled the original
             * PendingIntent
             */
        } catch (IntentSender.SendIntentException e) {
            // Log the error
            e.printStackTrace();
        }
    } else {
        /*
         * If no resolution is available, display a dialog to the
         * user with the error.
         */
        showDialog(connectionResult.getErrorCode());
    }
}

}
